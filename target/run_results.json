{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.0", "generated_at": "2025-05-23T21:15:36.931799Z", "invocation_id": "49a83f43-fec8-4211-a091-5a1785444bf7", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.451269Z", "completed_at": "2025-05-23T21:15:36.460472Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.460472Z", "completed_at": "2025-05-23T21:15:36.460472Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010385990142822266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.bbva_analysis.stg_balances", "compiled": true, "compiled_code": "\n\nselect\n    cast(ID as varchar(64)) as ID,\n    cast(period as varchar(32)) as period,\n    cast(product as varchar(32)) as product,\n    cast(entity as varchar(32)) as entity,\n    month,\n    type,\n    balance_amount,\n    days_default\nfrom \"TR_BI_BBVA\".\"dbo\".\"Balances\"\nwhere ID is not null;", "relation_name": "\"STG_BBVA\".\"stg\".\"stg_balances\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.462481Z", "completed_at": "2025-05-23T21:15:36.522111Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.522111Z", "completed_at": "2025-05-23T21:15:36.522111Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06062602996826172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.bbva_analysis.stg_customers", "compiled": true, "compiled_code": "\n\nselect\n    cast(ID as varchar(64)) as CustomerKey,\n    age,\n    income,\n    time_from_specialized,\n    type_job,\n    bureau_risk,\n    payroll,\n    product_1,\n    product_2,\n    product_3,\n    product_4,\n    ofert_1,\n    ofert_2,\n    ofert_3\nfrom \"TR_BI_BBVA\".\"dbo\".\"Customers\"\nwhere ID is not null;", "relation_name": "\"STG_BBVA\".\"stg\".\"stg_customers\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.524314Z", "completed_at": "2025-05-23T21:15:36.527314Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.528315Z", "completed_at": "2025-05-23T21:15:36.528315Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005011081695556641, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.bbva_analysis.stg_digital_activity", "compiled": true, "compiled_code": "\n\nselect\n    cast(ID as varchar(64)) as ID,\n    cast(period as varchar(32)) as period,\n    month,\n    dig_1,\n    dig_2,\n    dig_3,\n    dig_4,\n    dig_5,\n    dig_6,\n    dig_7,\n    dig_8,\n    dig_9,\n    dig_10,\n    dig_11\nfrom \"TR_BI_BBVA\".\"dbo\".\"Digital_Activity\"\nwhere ID is not null;", "relation_name": "\"STG_BBVA\".\"stg\".\"stg_digital_activity\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.530315Z", "completed_at": "2025-05-23T21:15:36.533315Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.533315Z", "completed_at": "2025-05-23T21:15:36.533315Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004000425338745117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.bbva_analysis.stg_liabilities", "compiled": true, "compiled_code": "\n\nselect\n    cast(ID as varchar(64)) as PeriodKey,\n    cast(period as varchar(32)) as period_code,\n    month,\n    product_1,\n    product_2\nfrom \"TR_BI_BBVA\".\"dbo\".\"Liabilities\"\nwhere ID is not null;", "relation_name": "\"STG_BBVA\".\"stg\".\"stg_liabilities\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.535315Z", "completed_at": "2025-05-23T21:15:36.538786Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.539786Z", "completed_at": "2025-05-23T21:15:36.539786Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0044705867767333984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.bbva_analysis.stg_movements", "compiled": true, "compiled_code": "\n\nselect\n    cast(ID as varchar(64)) as ID,\n    cast(period as varchar(32)) as period,\n    month,\n    type_1,\n    type_2,\n    type_3,\n    type_4\nfrom \"TR_BI_BBVA\".\"dbo\".\"Movements\"\nwhere ID is not null;", "relation_name": "\"STG_BBVA\".\"stg\".\"stg_movements\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.541787Z", "completed_at": "2025-05-23T21:15:36.544786Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.544786Z", "completed_at": "2025-05-23T21:15:36.544786Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003999948501586914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.bbva_analysis.stg_sample_submission", "compiled": true, "compiled_code": "\n\nselect\n    cast(ID as varchar(64)) as ID,\n    cast(period as varchar(32)) as period,\n    target\nfrom \"TR_BI_BBVA\".\"dbo\".\"Sample_Submission\"\nwhere ID is not null;", "relation_name": "\"STG_BBVA\".\"stg\".\"stg_sample_submission\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.546786Z", "completed_at": "2025-05-23T21:15:36.549787Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.550786Z", "completed_at": "2025-05-23T21:15:36.550786Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005000114440917969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.stg_dbt__artifacts", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"TR_BI_BBVA\".\"dbt_artifacts\".\"artifacts\"\n\n),\n\nfields as (\n\n    select\n        data:metadata:invocation_id::string as command_invocation_id,\n        data:metadata:env:DBT_CLOUD_RUN_ID::int as dbt_cloud_run_id,\n        generated_at,\n        path,\n        artifact_type,\n        data\n    from base\n\n),\n\ndeduped as (\n\n    select\n        *,\n        row_number() over (\n            partition by command_invocation_id, artifact_type\n            order by generated_at desc\n        ) as index\n    from fields\n    qualify index = 1\n\n),\n\nartifacts as (\n\n    select\n        command_invocation_id,\n        dbt_cloud_run_id,\n        generated_at,\n        path,\n        artifact_type,\n        data\n    from deduped\n\n)\n\nselect * from artifacts", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__artifacts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.553786Z", "completed_at": "2025-05-23T21:15:36.556787Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.556787Z", "completed_at": "2025-05-23T21:15:36.556787Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004997730255126953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.bbva_analysis.dim_customer", "compiled": true, "compiled_code": "\n\nselect\n    c.CustomerKey as CustomerKey,\n    c.age as age,\n    c.income as income,\n    c.time_from_specialized as time_from_specialized,\n    c.type_job as type_job,\n    c.bureau_risk as bureau_risk,\n    c.payroll as payroll,\n    c.product_1 as product_1,\n    c.product_2 as product_2,\n    c.product_3 as product_3,\n    c.product_4 as product_4,\n    c.ofert_1 as ofert_1,\n    c.ofert_2 as ofert_2,\n    c.ofert_3 as ofert_3\nfrom \"STG_BBVA\".\"stg\".\"stg_customers\" as c", "relation_name": "\"MASTER_BBVA\".\"DW\".\"dim_customer\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.559789Z", "completed_at": "2025-05-23T21:15:36.563036Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.563036Z", "completed_at": "2025-05-23T21:15:36.563036Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004248857498168945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.bbva_analysis.dim_tiempo", "compiled": true, "compiled_code": "\n\nselect\n    p.PeriodKey as PeriodKey,\n    p.period_code as period_code,\n    p.month as month\nfrom \"STG_BBVA\".\"stg\".\"stg_liabilities\" as p", "relation_name": "\"MASTER_BBVA\".\"DW\".\"dim_tiempo\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.565288Z", "completed_at": "2025-05-23T21:15:36.580424Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.580424Z", "completed_at": "2025-05-23T21:15:36.580424Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0163877010345459, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.stg_dbt__exposures", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__artifacts\"\n\n),\n\nmanifests as (\n\n    select *\n    from base\n    where artifact_type = 'manifest.json'\n\n),\n\nflatten as (\n\n    select\n        command_invocation_id,\n        dbt_cloud_run_id,\n        generated_at as artifact_generated_at,\n        node.key as node_id,\n        node.value:name::string as name,\n        to_array(node.value:depends_on:nodes) as depends_on_nodes,\n        to_array(node.value:sources:nodes) as depends_on_sources,\n        node.value:type::string as type,\n        node.value:owner:name::string as owner,\n        node.value:maturity::string as maturity,\n        node.value:package_name::string as package_name\n    from manifests,\n    lateral flatten(input => data:exposures) as node\n\n),\n\nsurrogate_key as (\n\n    select\n        md5(cast(coalesce(cast(command_invocation_id as \n    string\n), '') || '-' || coalesce(cast(node_id as \n    string\n), '') as \n    string\n)) as manifest_model_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        node_id,\n        name,\n        depends_on_nodes,\n        depends_on_sources,\n        type,\n        owner,\n        maturity,\n        package_name\n    from flatten\n\n)\n\nselect * from surrogate_key", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__exposures\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.582429Z", "completed_at": "2025-05-23T21:15:36.586797Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.587799Z", "completed_at": "2025-05-23T21:15:36.587799Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006373405456542969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.stg_dbt__model_executions", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__artifacts\"\n\n),\n\nrun_results as (\n\n    select *\n    from base\n    where artifact_type = 'run_results.json'\n\n),\n\ndbt_run as (\n\n    select *\n    from run_results\n    where data:args:which = 'run'\n\n),\n\nfields as (\n\n    select\n        command_invocation_id,\n        dbt_cloud_run_id,\n        generated_at as artifact_generated_at,\n        coalesce(data:args:full_refresh, 'false')::boolean as was_full_refresh,\n        result.value:unique_id::string as node_id,\n        split(result.value:thread_id::string, '-')[1]::integer as thread_id,\n        result.value:status::string as status,\n\n        -- The first item in the timing array is the model-level `compile`\n        result.value:timing[0]:started_at::timestamp_ntz as compile_started_at,\n\n        -- The second item in the timing array is `execute`.\n        result.value:timing[1]:completed_at::timestamp_ntz as query_completed_at,\n\n        -- Confusingly, this does not match the delta of the above two timestamps.\n        -- should we calculate it instead?\n        coalesce(result.value:execution_time::float, 0) as total_node_runtime,\n\n        result.value:adapter_response:rows_affected::int as rows_affected\n    from dbt_run,\n    lateral flatten(input => data:results) as result\n\n),\n\nsurrogate_key as (\n\n    select\n        md5(cast(coalesce(cast(command_invocation_id as \n    string\n), '') || '-' || coalesce(cast(node_id as \n    string\n), '') as \n    string\n)) as model_execution_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        was_full_refresh,\n        node_id,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected\n    from fields\n\n)\n\nselect * from surrogate_key", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__model_executions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.589950Z", "completed_at": "2025-05-23T21:15:36.593950Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.593950Z", "completed_at": "2025-05-23T21:15:36.593950Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00514984130859375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.stg_dbt__models", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__artifacts\"\n\n),\n\nmanifests as (\n\n    select *\n    from base\n    where artifact_type = 'manifest.json'\n\n),\n\nflatten as (\n\n    select\n        command_invocation_id,\n        dbt_cloud_run_id,\n        generated_at as artifact_generated_at,\n        node.key as node_id,\n        node.value:database::string as model_database,\n        node.value:schema::string as model_schema,\n        node.value:name::string as name,\n        to_array(node.value:depends_on:nodes) as depends_on_nodes,\n        node.value:package_name::string as package_name,\n        node.value:path::string as model_path,\n        node.value:checksum.checksum::string as checksum,\n        node.value:config.materialized::string as model_materialization\n    from manifests,\n    lateral flatten(input => data:nodes) as node\n    where node.value:resource_type = 'model'\n\n),\n\nsurrogate_key as (\n\n    select\n        md5(cast(coalesce(cast(command_invocation_id as \n    string\n), '') || '-' || coalesce(cast(node_id as \n    string\n), '') as \n    string\n)) as manifest_model_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        node_id,\n        model_database,\n        model_schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        model_path,\n        checksum,\n        model_materialization\n    from flatten\n\n)\n\nselect * from surrogate_key", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__models\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.596957Z", "completed_at": "2025-05-23T21:15:36.599182Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.600643Z", "completed_at": "2025-05-23T21:15:36.600643Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004693031311035156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.stg_dbt__run_results", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__artifacts\"\n\n),\n\nrun_results as (\n\n    select *\n    from base\n    where artifact_type = 'run_results.json'\n\n),\n\ndbt_run as (\n\n    select *\n    from run_results\n    where data:args:which = 'run'\n\n),\n\nfields as (\n\n    select\n        generated_at as artifact_generated_at,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        data:metadata:dbt_version::string as dbt_version,\n        data:metadata:env as env,\n        data:elapsed_time::float as elapsed_time,\n        data:args:which::string as execution_command,\n        coalesce(data:args:full_refresh, 'false')::boolean as was_full_refresh,\n        data:args:models as selected_models,\n        data:args:target::string as target\n    from dbt_run\n\n)\n\nselect * from fields", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__run_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.601640Z", "completed_at": "2025-05-23T21:15:36.605799Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.605799Z", "completed_at": "2025-05-23T21:15:36.605799Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004159212112426758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.stg_dbt__run_results_env_keys", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__artifacts\"\n\n),\n\nrun_results as (\n\n    select *\n    from base\n    where artifact_type = 'run_results.json'\n\n),\n\ndbt_run as (\n\n    select *\n    from run_results\n    where data:args:which = 'run'\n\n),\n\nenv_keys as (\n\n    select\n        distinct(env.key)\n    from dbt_run,\n    lateral flatten(input => data:metadata:env) as env\n    -- Sort results to ensure things are deterministic\n    order by 1\n\n)\n\nselect * from env_keys", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__run_results_env_keys\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.608126Z", "completed_at": "2025-05-23T21:15:36.613334Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.613334Z", "completed_at": "2025-05-23T21:15:36.613334Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006509304046630859, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.stg_dbt__sources", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__artifacts\"\n\n),\n\nmanifests as (\n\n    select *\n    from base\n    where artifact_type = 'manifest.json'\n\n),\n\nflatten as (\n\n    select\n        command_invocation_id,\n        dbt_cloud_run_id,\n        generated_at as artifact_generated_at,\n        node.key as node_id,\n        node.value:name::string as name,\n        node.value:source_name::string as source_name,\n        node.value:schema::string as source_schema,\n        node.value:package_name::string as package_name,\n        node.value:relation_name::string as relation_name,\n        node.value:path::string as source_path\n    from manifests,\n    lateral flatten(input => data:sources) as node\n    where node.value:resource_type = 'source'\n\n),\n\nsurrogate_key as (\n\n    select\n        md5(cast(coalesce(cast(command_invocation_id as \n    string\n), '') || '-' || coalesce(cast(node_id as \n    string\n), '') as \n    string\n)) as manifest_source_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        node_id,\n        name,\n        source_name,\n        source_schema,\n        package_name,\n        relation_name,\n        source_path\n    from flatten\n\n)\n\nselect * from surrogate_key", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__sources\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.615569Z", "completed_at": "2025-05-23T21:15:36.620644Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.620644Z", "completed_at": "2025-05-23T21:15:36.620644Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006192445755004883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.stg_dbt__test_executions", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__artifacts\"\n\n),\n\nrun_results as (\n\n    select *\n    from base\n    where artifact_type = 'run_results.json'\n\n),\n\ndbt_run as (\n\n    select *\n    from run_results\n    where data:args:which = 'test'\n\n),\n\nfields as (\n\n    select\n        command_invocation_id,\n        dbt_cloud_run_id,\n        generated_at as artifact_generated_at,\n        coalesce(data:args:full_refresh, 'false')::boolean as was_full_refresh,\n        result.value:unique_id::string as node_id,\n        split(result.value:thread_id::string, '-')[1]::integer as thread_id,\n        result.value:status::string as status,\n        result.value:message::string as message,\n\n        -- The first item in the timing array is the model-level `compile`\n        result.value:timing[0]:started_at::timestamp_ntz as compile_started_at,\n\n        -- The second item in the timing array is `execute`.\n        result.value:timing[1]:completed_at::timestamp_ntz as query_completed_at,\n\n        -- Confusingly, this does not match the delta of the above two timestamps.\n        -- should we calculate it instead?\n        coalesce(result.value:execution_time::float, 0) as total_node_runtime,\n\n        result.value:adapter_response:rows_affected::int as rows_affected\n    from dbt_run,\n    lateral flatten(input => data:results) as result\n\n),\n\nsurrogate_key as (\n\n    select\n        md5(cast(coalesce(cast(command_invocation_id as \n    string\n), '') || '-' || coalesce(cast(node_id as \n    string\n), '') as \n    string\n)) as model_execution_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        was_full_refresh,\n        node_id,\n        thread_id,\n        status,\n        message,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected\n    from fields\n\n)\n\nselect * from surrogate_key", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__test_executions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.622645Z", "completed_at": "2025-05-23T21:15:36.634253Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.635258Z", "completed_at": "2025-05-23T21:15:36.635258Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013611555099487305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.bbva_analysis.not_null_dim_customer_ID.206d444459", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ID\nfrom \"MASTER_BBVA\".\"DW\".\"dim_customer\"\nwhere ID is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.636254Z", "completed_at": "2025-05-23T21:15:36.640409Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.640409Z", "completed_at": "2025-05-23T21:15:36.640409Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0041539669036865234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.bbva_analysis.not_null_dim_customer_customer_key.c289fe4d1f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_key\nfrom \"MASTER_BBVA\".\"DW\".\"dim_customer\"\nwhere customer_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.642941Z", "completed_at": "2025-05-23T21:15:36.646942Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.646942Z", "completed_at": "2025-05-23T21:15:36.646942Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005279541015625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.bbva_analysis.not_null_dim_customer_ofert_1.b54f425b4c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ofert_1\nfrom \"MASTER_BBVA\".\"DW\".\"dim_customer\"\nwhere ofert_1 is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.649943Z", "completed_at": "2025-05-23T21:15:36.652942Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.653946Z", "completed_at": "2025-05-23T21:15:36.653946Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0060040950775146484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.bbva_analysis.not_null_dim_customer_ofert_2.6247fcd68a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ofert_2\nfrom \"MASTER_BBVA\".\"DW\".\"dim_customer\"\nwhere ofert_2 is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.656291Z", "completed_at": "2025-05-23T21:15:36.659806Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.659806Z", "completed_at": "2025-05-23T21:15:36.659806Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004584550857543945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.bbva_analysis.not_null_dim_customer_ofert_3.b77e93fcba", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ofert_3\nfrom \"MASTER_BBVA\".\"DW\".\"dim_customer\"\nwhere ofert_3 is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.662676Z", "completed_at": "2025-05-23T21:15:36.666684Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.666684Z", "completed_at": "2025-05-23T21:15:36.666684Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005553483963012695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.bbva_analysis.not_null_dim_customer_product_1.45c72757ff", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_1\nfrom \"MASTER_BBVA\".\"DW\".\"dim_customer\"\nwhere product_1 is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.668688Z", "completed_at": "2025-05-23T21:15:36.672685Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.672685Z", "completed_at": "2025-05-23T21:15:36.672685Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004993438720703125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.bbva_analysis.not_null_dim_customer_product_2.7232232a54", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_2\nfrom \"MASTER_BBVA\".\"DW\".\"dim_customer\"\nwhere product_2 is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.675162Z", "completed_at": "2025-05-23T21:15:36.678188Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.679191Z", "completed_at": "2025-05-23T21:15:36.679191Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005505084991455078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.bbva_analysis.not_null_dim_customer_product_3.5bdbc02f70", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_3\nfrom \"MASTER_BBVA\".\"DW\".\"dim_customer\"\nwhere product_3 is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.681189Z", "completed_at": "2025-05-23T21:15:36.689186Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.690188Z", "completed_at": "2025-05-23T21:15:36.690188Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009998321533203125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.bbva_analysis.not_null_dim_customer_product_4.e0c71ff8ff", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_4\nfrom \"MASTER_BBVA\".\"DW\".\"dim_customer\"\nwhere product_4 is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.693189Z", "completed_at": "2025-05-23T21:15:36.698188Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.699193Z", "completed_at": "2025-05-23T21:15:36.699193Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008003950119018555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.bbva_analysis.unique_dim_customer_customer_key.7b0683cc6e", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_key as unique_field,\n    count(*) as n_records\n\nfrom \"MASTER_BBVA\".\"DW\".\"dim_customer\"\nwhere customer_key is not null\ngroup by customer_key\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.700188Z", "completed_at": "2025-05-23T21:15:36.704450Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.705450Z", "completed_at": "2025-05-23T21:15:36.705450Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005262136459350586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.bbva_analysis.fact_customer_period", "compiled": true, "compiled_code": "\n\nselect\n    c.CustomerKey,\n    p.PeriodKey,\n    d.dig_1, \n    d.dig_2, \n    d.dig_3, \n    d.dig_4, \n    d.dig_5, \n    d.dig_6, \n    d.dig_7, \n    d.dig_8, \n    d.dig_9, \n    d.dig_10, \n    d.dig_11,\n    b.balance_amount, \n    b.days_default,\n    l.product_1 as debt_product_1, \n    l.product_2 as debt_product_2,\n    m.type_1 as movements_type_1,\n    m.type_2 as movements_type_2,\n    m.type_3 as movements_type_3,\n    m.type_4 as movements_type_4,\n    ss.target\nfrom \"STG_BBVA\".\"stg\".\"stg_digital_activity\" as d\njoin \"MASTER_BBVA\".\"DW\".\"dim_customer\" as c on d.ID = c.CustomerKey\njoin \"MASTER_BBVA\".\"DW\".\"dim_tiempo\" as p on d.period = p.period_code\nleft join \"STG_BBVA\".\"stg\".\"stg_liabilities\" as l on d.ID = l.PeriodKey\nleft join \"STG_BBVA\".\"stg\".\"stg_movements\" as m on d.ID = m.ID\nleft join \"STG_BBVA\".\"stg\".\"stg_sample_submission\" as ss on d.ID = ss.ID\nleft join \"STG_BBVA\".\"stg\".\"stg_balances\" as b on d.ID = b.ID", "relation_name": "\"MASTER_BBVA\".\"DW\".\"fact_customer_period\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.707623Z", "completed_at": "2025-05-23T21:15:36.711758Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.712759Z", "completed_at": "2025-05-23T21:15:36.712759Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006263256072998047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.bbva_analysis.not_null_dim_tiempo_PeriodKey.aafa528efd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect PeriodKey\nfrom \"MASTER_BBVA\".\"DW\".\"dim_tiempo\"\nwhere PeriodKey is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.714756Z", "completed_at": "2025-05-23T21:15:36.719868Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.719868Z", "completed_at": "2025-05-23T21:15:36.719868Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006110191345214844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.bbva_analysis.not_null_dim_tiempo_month.ce48b83224", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect month\nfrom \"MASTER_BBVA\".\"DW\".\"dim_tiempo\"\nwhere month is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.722873Z", "completed_at": "2025-05-23T21:15:36.726862Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.726862Z", "completed_at": "2025-05-23T21:15:36.726862Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004998922348022461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.bbva_analysis.not_null_dim_tiempo_period_code.6c5d2296f5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect period_code\nfrom \"MASTER_BBVA\".\"DW\".\"dim_tiempo\"\nwhere period_code is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.729869Z", "completed_at": "2025-05-23T21:15:36.732862Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.733867Z", "completed_at": "2025-05-23T21:15:36.733867Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0060040950775146484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.bbva_analysis.unique_dim_tiempo_PeriodKey.0dbc69a93a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    PeriodKey as unique_field,\n    count(*) as n_records\n\nfrom \"MASTER_BBVA\".\"DW\".\"dim_tiempo\"\nwhere PeriodKey is not null\ngroup by PeriodKey\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.734865Z", "completed_at": "2025-05-23T21:15:36.741224Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.742224Z", "completed_at": "2025-05-23T21:15:36.742224Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007358551025390625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.dim_dbt__exposures", "compiled": true, "compiled_code": "\n\nwith dbt_models as (\n\n    select * from \"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__exposures\"\n\n),\n\ndbt_models_incremental as (\n\n    select *\n    from dbt_models\n\n    \n\n),\n\nfields as (\n\n     select\n        t.manifest_model_id,\n        t.command_invocation_id,\n        t.dbt_cloud_run_id,\n        t.artifact_generated_at,\n        t.node_id,\n        t.name,\n        t.type,\n        t.owner,\n        t.maturity,\n        f.value::string as output_feeds,\n        t.package_name\n    from dbt_models_incremental as t,\n    lateral flatten(input => depends_on_nodes) as f\n\n)\n\nselect * from fields", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"dim_dbt__exposures\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.744247Z", "completed_at": "2025-05-23T21:15:36.748247Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.748247Z", "completed_at": "2025-05-23T21:15:36.748247Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0050160884857177734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.int_dbt__model_executions", "compiled": true, "compiled_code": "\n\nwith model_executions as (\n\n    select *\n    from \"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__model_executions\"\n\n),\n\nmodel_executions_incremental as (\n\n    select *\n    from model_executions\n\n    \n\n),\n\nfields as (\n\n    select\n        model_execution_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        was_full_refresh,\n        node_id,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected\n    from model_executions_incremental\n\n)\n\nselect * from fields", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"int_dbt__model_executions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.750397Z", "completed_at": "2025-05-23T21:15:36.755777Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.755777Z", "completed_at": "2025-05-23T21:15:36.755777Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007525444030761719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.dim_dbt__models", "compiled": true, "compiled_code": "\n\nwith dbt_models as (\n\n    select * from \"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__models\"\n\n),\n\ndbt_models_incremental as (\n\n    select *\n    from dbt_models\n\n    \n\n),\n\nfields as (\n\n    select\n        manifest_model_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        node_id,\n        model_database,\n        model_schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        model_path,\n        checksum,\n        model_materialization\n    from dbt_models_incremental\n\n)\n\nselect * from fields", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"dim_dbt__models\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.758775Z", "completed_at": "2025-05-23T21:15:36.774747Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.775748Z", "completed_at": "2025-05-23T21:15:36.775748Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01797008514404297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.fct_dbt__run_results", "compiled": true, "compiled_code": "\n\n\n\nwith run_results as (\n\n    select *\n    from \"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__run_results\"\n\n),\n\nincremental_run_results as (\n\n    select *\n    from run_results\n\n    \n\n),\n\nfields as (\n\n    select\n        artifact_generated_at,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        dbt_version,\n        elapsed_time,\n        execution_command,\n        selected_models,\n        target,\n        was_full_refresh\n\n        \n    from incremental_run_results\n\n)\n\nselect * from fields", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__run_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.777748Z", "completed_at": "2025-05-23T21:15:36.781748Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.781748Z", "completed_at": "2025-05-23T21:15:36.781748Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0050008296966552734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.dim_dbt__sources", "compiled": true, "compiled_code": "\n\nwith dbt_sources as (\n\n    select * from \"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__sources\"\n\n),\n\ndbt_sources_incremental as (\n\n    select *\n    from dbt_sources\n\n    \n\n),\n\nfields as (\n\n    select\n        manifest_source_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        node_id,\n        name,\n        source_name,\n        source_schema,\n        package_name,\n        relation_name,\n        source_path\n    from dbt_sources_incremental\n\n)\n\nselect * from fields", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"dim_dbt__sources\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.783748Z", "completed_at": "2025-05-23T21:15:36.787747Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.787747Z", "completed_at": "2025-05-23T21:15:36.787747Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004999399185180664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.fct_dbt__test_executions", "compiled": true, "compiled_code": "\n\nwith model_executions as (\n\n    select *\n    from \"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__test_executions\"\n\n),\n\nmodel_executions_incremental as (\n\n    select *\n    from model_executions\n\n    \n\n),\n\nfields as (\n\n    select\n        model_execution_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        was_full_refresh,\n        node_id,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected\n    from model_executions_incremental\n\n)\n\nselect * from fields", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__test_executions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.789748Z", "completed_at": "2025-05-23T21:15:36.793747Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.794748Z", "completed_at": "2025-05-23T21:15:36.794748Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006000518798828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.bbva_analysis.not_null_fact_customer_period_customer_key.f2f382ae5c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_key\nfrom \"MASTER_BBVA\".\"DW\".\"fact_customer_period\"\nwhere customer_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.796747Z", "completed_at": "2025-05-23T21:15:36.800749Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.801748Z", "completed_at": "2025-05-23T21:15:36.801748Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0060007572174072266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.bbva_analysis.not_null_fact_customer_period_period_key.3fa1d9b010", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect period_key\nfrom \"MASTER_BBVA\".\"DW\".\"fact_customer_period\"\nwhere period_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.803747Z", "completed_at": "2025-05-23T21:15:36.807748Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.807748Z", "completed_at": "2025-05-23T21:15:36.807748Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006000518798828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.bbva_analysis.not_null_fact_customer_period_target.c6beb3d065", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect target\nfrom \"MASTER_BBVA\".\"DW\".\"fact_customer_period\"\nwhere target is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.809748Z", "completed_at": "2025-05-23T21:15:36.815833Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.816834Z", "completed_at": "2025-05-23T21:15:36.816834Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007086992263793945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_artifacts.not_null_dim_dbt__exposures_manifest_model_id.1cfdaa0c94", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect manifest_model_id\nfrom \"DBT_ARTIFACTS\".\"artifacts\".\"dim_dbt__exposures\"\nwhere manifest_model_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.818833Z", "completed_at": "2025-05-23T21:15:36.822830Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.823830Z", "completed_at": "2025-05-23T21:15:36.823830Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0059964656829833984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_artifacts.unique_dim_dbt__exposures_manifest_model_id_output_feeds.b0bf30fb44", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    manifest_model_id || '-' || output_feeds as unique_field,\n    count(*) as n_records\n\nfrom \"DBT_ARTIFACTS\".\"artifacts\".\"dim_dbt__exposures\"\nwhere manifest_model_id || '-' || output_feeds is not null\ngroup by manifest_model_id || '-' || output_feeds\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.825830Z", "completed_at": "2025-05-23T21:15:36.829829Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.829829Z", "completed_at": "2025-05-23T21:15:36.829829Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00500035285949707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.fct_dbt__model_executions", "compiled": true, "compiled_code": "\n\nwith models as (\n\n    select *\n    from \"DBT_ARTIFACTS\".\"artifacts\".\"dim_dbt__models\"\n\n),\n\nmodel_executions as (\n\n    select *\n    from \"DBT_ARTIFACTS\".\"artifacts\".\"int_dbt__model_executions\"\n\n),\n\nmodel_executions_incremental as (\n\n    select *\n    from model_executions\n\n    \n\n),\n\nmodel_executions_with_materialization as (\n\n    select\n        model_executions_incremental.*,\n        models.model_materialization,\n        models.model_schema,\n        models.name\n    from model_executions_incremental\n    left join models on\n        (\n            model_executions_incremental.command_invocation_id = models.command_invocation_id\n            or model_executions_incremental.dbt_cloud_run_id = models.dbt_cloud_run_id\n        )\n        and model_executions_incremental.node_id = models.node_id\n\n),\n\nfields as (\n\n    select\n        model_execution_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        was_full_refresh,\n        node_id,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        model_materialization,\n        model_schema,\n        name\n    from model_executions_with_materialization\n\n)\n\nselect * from fields", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__model_executions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.832319Z", "completed_at": "2025-05-23T21:15:36.836514Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.837030Z", "completed_at": "2025-05-23T21:15:36.837030Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005230426788330078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_artifacts.not_null_dim_dbt__models_manifest_model_id.df81d26c60", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect manifest_model_id\nfrom \"DBT_ARTIFACTS\".\"artifacts\".\"dim_dbt__models\"\nwhere manifest_model_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.839659Z", "completed_at": "2025-05-23T21:15:36.844361Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.844361Z", "completed_at": "2025-05-23T21:15:36.844361Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006808757781982422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_artifacts.unique_dim_dbt__models_manifest_model_id.c105319f3e", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    manifest_model_id as unique_field,\n    count(*) as n_records\n\nfrom \"DBT_ARTIFACTS\".\"artifacts\".\"dim_dbt__models\"\nwhere manifest_model_id is not null\ngroup by manifest_model_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.846470Z", "completed_at": "2025-05-23T21:15:36.851199Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.851725Z", "completed_at": "2025-05-23T21:15:36.851725Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006304025650024414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_artifacts.not_null_fct_dbt__run_results_command_invocation_id.11abc48935", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect command_invocation_id\nfrom \"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__run_results\"\nwhere command_invocation_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.853316Z", "completed_at": "2025-05-23T21:15:36.857549Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.857549Z", "completed_at": "2025-05-23T21:15:36.857549Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004765510559082031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_artifacts.unique_fct_dbt__run_results_command_invocation_id.08941b96a3", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    command_invocation_id as unique_field,\n    count(*) as n_records\n\nfrom \"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__run_results\"\nwhere command_invocation_id is not null\ngroup by command_invocation_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.859691Z", "completed_at": "2025-05-23T21:15:36.863815Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.863815Z", "completed_at": "2025-05-23T21:15:36.863815Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0052585601806640625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_artifacts.not_null_dim_dbt__sources_manifest_source_id.34e9829000", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect manifest_source_id\nfrom \"DBT_ARTIFACTS\".\"artifacts\".\"dim_dbt__sources\"\nwhere manifest_source_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.865815Z", "completed_at": "2025-05-23T21:15:36.868815Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.869815Z", "completed_at": "2025-05-23T21:15:36.869815Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005000114440917969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_artifacts.unique_dim_dbt__sources_manifest_source_id.a9a1a372ce", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    manifest_source_id as unique_field,\n    count(*) as n_records\n\nfrom \"DBT_ARTIFACTS\".\"artifacts\".\"dim_dbt__sources\"\nwhere manifest_source_id is not null\ngroup by manifest_source_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.872819Z", "completed_at": "2025-05-23T21:15:36.877819Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.877819Z", "completed_at": "2025-05-23T21:15:36.877819Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005997657775878906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.fct_dbt__exposures_updates", "compiled": true, "compiled_code": "with model_executions as (\n\n    select * from \"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__model_executions\"\n\n),\n\nexposures_record as (\n\n    select * from \"DBT_ARTIFACTS\".\"artifacts\".\"dim_dbt__exposures\"\n\n),\n\n\nmodel_updates as (\n\n    select \n        max(query_completed_at) as latest_update,\n        node_id\n    from model_executions\n    group by node_id\n\n),\n\nexposures_latest as (\n\n    select\n        artifact_generated_at as latest_generation,\n        node_id,\n        name,\n        type,\n        owner,\n        maturity,\n        package_name,\n        output_feeds\n    from exposures_record\n    where artifact_generated_at = (select max(artifact_generated_at) from exposures_record)\n\n),\n\nexposures_updates as (\n\n    select \n        e.latest_generation,\n        e.node_id,\n        e.name, \n        e.type,\n        e.owner,\n        e.maturity,\n        e.package_name,\n        e.output_feeds,\n        latest_update as feed_latest_update\n    from exposures_latest e\n    left join model_updates m\n      on m.node_id = e.output_feeds\n\n)\n\nselect * from exposures_updates", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__exposures_updates\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.879815Z", "completed_at": "2025-05-23T21:15:36.883619Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.883619Z", "completed_at": "2025-05-23T21:15:36.883619Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0038042068481445312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.fct_dbt__latest_full_model_executions", "compiled": true, "compiled_code": "with run_results as (\n\n    select *\n    from \"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__run_results\"\n\n),\n\nmodel_executions as (\n\n    select *\n    from \"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__model_executions\"\n\n),\n\nlatest_full as (\n\n    select *\n    from run_results\n    where selected_models is null and was_full_refresh = false\n    order by artifact_generated_at desc\n    limit 1\n\n),\n\njoined as (\n\n    select\n        model_executions.*\n    from latest_full\n    left join model_executions on\n        model_executions.command_invocation_id = latest_full.command_invocation_id\n        or model_executions.dbt_cloud_run_id = latest_full.dbt_cloud_run_id\n\n),\n\nfields as (\n\n    select\n        artifact_generated_at,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        model_execution_id,\n        model_materialization,\n        model_schema,\n        name,\n        node_id,\n        thread_id,\n        rows_affected,\n        status,\n        was_full_refresh\n    from joined\n\n)\n\nselect * from fields", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__latest_full_model_executions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.886459Z", "completed_at": "2025-05-23T21:15:36.890464Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.890464Z", "completed_at": "2025-05-23T21:15:36.890464Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0053827762603759766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_artifacts.not_null_fct_dbt__model_executions_model_execution_id.ecb7ddbb69", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect model_execution_id\nfrom \"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__model_executions\"\nwhere model_execution_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.891465Z", "completed_at": "2025-05-23T21:15:36.896464Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.897468Z", "completed_at": "2025-05-23T21:15:36.897468Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006002902984619141, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_artifacts.unique_fct_dbt__model_executions_model_execution_id.ab9f314f59", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    model_execution_id as unique_field,\n    count(*) as n_records\n\nfrom \"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__model_executions\"\nwhere model_execution_id is not null\ngroup by model_execution_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.898646Z", "completed_at": "2025-05-23T21:15:36.902706Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.902706Z", "completed_at": "2025-05-23T21:15:36.902706Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004060029983520508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.fct_dbt__critical_path", "compiled": true, "compiled_code": "with models as (\n\n    select *\n    from \"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__models\"\n\n),\n\nlatest_executions as (\n\n    select *\n    from \"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__latest_full_model_executions\"\n\n),\n\nlatest_id as (\n    -- Find the latest full, incremental execution\n\n    select\n        any_value(command_invocation_id) as command_invocation_id,\n        any_value(dbt_cloud_run_id) as dbt_cloud_run_id\n    from latest_executions\n\n),\n\nlatest_models as (\n    -- Get the latest set of models for the above execution\n\n    select\n        models.node_id,\n        models.depends_on_nodes,\n        models.model_materialization\n    from latest_id\n    left join models on\n        latest_id.command_invocation_id = models.command_invocation_id\n        or latest_id.dbt_cloud_run_id = models.dbt_cloud_run_id\n\n\n),\n\nnode_dependencies as (\n    -- Create a row for each model and dependency (could be another model, or source)\n\n    select\n        latest_models.node_id,\n        node.value::string as depends_on_node_id,\n        regexp_substr(node.value::string, '^([a-z]+)') as depends_on_node_type\n    from latest_models,\n    lateral flatten(input => latest_models.depends_on_nodes) as node\n\n),\n\nnode_dependencies_deduped as (\n    -- depends_on_nodes is simply a list of all the ref() statements used in a model, so it may contain duplicates\n\n    select distinct\n        node_id,\n        depends_on_node_type,\n        depends_on_node_id\n    from node_dependencies\n\n),\n\nmodel_dependencies_with_total_node_runtime as (\n    -- Model dependencies enriched with execution time\n\n    select distinct\n        node_dependencies_deduped.node_id,\n        latest_executions.total_node_runtime,\n        depends_on_node_id\n    from node_dependencies_deduped\n    left join latest_executions on node_dependencies_deduped.node_id = latest_executions.node_id\n    where depends_on_node_type = 'model'\n\n),\n\nmodels_with_at_least_one_model_dependency as (\n    -- Return a list of model nodes which have at least one model dependency\n\n    select distinct\n        node_id\n    from node_dependencies\n    where depends_on_node_type = 'model'\n\n),\n\nmodels_with_no_model_dependencies_with_total_node_runtime as (\n    -- Models which have no dependencies enriched with execution time\n    -- These are models at the base of the tree\n\n    select\n        latest_models.node_id,\n        latest_executions.total_node_runtime\n    from latest_models\n    left join models_with_at_least_one_model_dependency\n        on latest_models.node_id = models_with_at_least_one_model_dependency.node_id\n    left join latest_executions on latest_models.node_id = latest_executions.node_id\n    where models_with_at_least_one_model_dependency.node_id is null\n\n),\n\nmodels_with_dependent_models as (\n    -- Get a list of all the models which have dependent models\n\n    select distinct depends_on_node_id as node_id\n    from node_dependencies_deduped\n\n),\n\nmodels_with_no_dependent_models as (\n    -- Models which have no dependents\n    -- These are models at the tips of the tree\n\n    select\n        latest_models.node_id\n    from latest_models\n    left join models_with_dependent_models\n    on latest_models.node_id = models_with_dependent_models.node_id\n    where models_with_dependent_models.node_id is null\n\n),\n\nanchor as (\n    -- The anchor of a recursive CTE is the initial query\n    -- The anchor in this case is models which have no dependents, the tips of the tree\n    -- The dependencies for these models are joined in to build out the paths during recursion\n\n    select\n        models_with_no_dependent_models.node_id,\n        coalesce(node_dependencies_deduped.depends_on_node_id, '') as depends_on_node_id,\n        coalesce(latest_executions.total_node_runtime, 0) as total_node_runtime\n    from models_with_no_dependent_models\n    left join node_dependencies_deduped on models_with_no_dependent_models.node_id = node_dependencies_deduped.node_id\n    left join latest_executions on models_with_no_dependent_models.node_id = latest_executions.node_id\n\n),\n\nall_needed_dependencies as (\n    -- Union all the base models with all other dependencies\n    -- Use an empty string for depends_on_node_id to avoid NULL result in a non-nullable column error\n    -- Nothing will join onto the empty string depends_on_node_id, ending the recursion at the base.\n\n    select\n        node_id,\n        total_node_runtime,\n        '' as depends_on_node_id\n    from models_with_no_model_dependencies_with_total_node_runtime\n    union\n    select\n        node_id,\n        total_node_runtime,\n        depends_on_node_id as depends_on_node_id\n    from model_dependencies_with_total_node_runtime\n\n),\n\nsearch_path (node_ids, total_time) as (\n    -- The recursive part\n    -- This CTE creates an array of node_ids and total_time for every possible path through the DAG\n    -- Starting with the tips of the tree, work backwards through every path until there's a '' depends_on_node_id\n\n    select\n        array_construct(depends_on_node_id, node_id),\n        total_node_runtime\n    from anchor\n    union all\n    select\n        array_cat(to_array(all_needed_dependencies.depends_on_node_id), search_path.node_ids) as node_ids,\n        coalesce(all_needed_dependencies.total_node_runtime, 0) + search_path.total_time\n    from search_path\n    left join all_needed_dependencies\n    where get(search_path.node_ids, 0) = all_needed_dependencies.node_id\n\n),\n\nlongest_path_node_ids as (\n    -- Find the path with the longest total time\n\n    select\n        -- Remove any empty strings from the beginning of the array that were introduced in search_path to prevent infinite recursion\n        case\n            when get(node_ids, 0) = ''\n            -- Ensure we keep the last element of the array by using array_size for the last index\n            then array_slice(node_ids, 1, array_size(node_ids))\n            else node_ids\n        end as node_ids,\n        total_time\n    from search_path\n    order by total_time desc\n    limit 1\n\n),\n\nflattened as (\n    -- Flatten the array of node_ids and keep the index\n\n    select\n        value as node_id,\n        index\n    from longest_path_node_ids,\n    lateral flatten (input => node_ids)\n\n),\n\nlongest_path_with_times as (\n    -- Join the indidivual model execution times back in along with the materializations\n\n    select\n        flattened.node_id::string as node_id,\n        flattened.index,\n        latest_executions.total_node_runtime/60 as execution_minutes,\n        latest_models.model_materialization\n    from flattened\n    left join latest_executions on flattened.node_id = latest_executions.node_id\n    left join latest_models on flattened.node_id = latest_models.node_id\n\n)\n\nselect * from longest_path_with_times", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__critical_path\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.905212Z", "completed_at": "2025-05-23T21:15:36.908789Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.909788Z", "completed_at": "2025-05-23T21:15:36.909788Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005082368850708008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_artifacts.not_null_fct_dbt__latest_full_model_executions_node_id.75b07a2f66", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect node_id\nfrom \"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__latest_full_model_executions\"\nwhere node_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.910791Z", "completed_at": "2025-05-23T21:15:36.914788Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.914788Z", "completed_at": "2025-05-23T21:15:36.914788Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003997087478637695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_artifacts.unique_fct_dbt__latest_full_model_executions_node_id.b6f2773b6c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    node_id as unique_field,\n    count(*) as n_records\n\nfrom \"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__latest_full_model_executions\"\nwhere node_id is not null\ngroup by node_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.916789Z", "completed_at": "2025-05-23T21:15:36.921029Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.921029Z", "completed_at": "2025-05-23T21:15:36.921029Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005234479904174805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_artifacts.not_null_fct_dbt__critical_path_node_id.8a76d88496", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect node_id\nfrom \"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__critical_path\"\nwhere node_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-23T21:15:36.923461Z", "completed_at": "2025-05-23T21:15:36.928747Z"}, {"name": "execute", "started_at": "2025-05-23T21:15:36.928747Z", "completed_at": "2025-05-23T21:15:36.928747Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007372617721557617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_artifacts.unique_fct_dbt__critical_path_node_id.a430b9cf10", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    node_id as unique_field,\n    count(*) as n_records\n\nfrom \"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__critical_path\"\nwhere node_id is not null\ngroup by node_id\nhaving count(*) > 1\n\n\n", "relation_name": null}], "elapsed_time": 0.8576033115386963, "args": {"static": false, "which": "generate", "vars": {}, "log_format_file": "debug", "invocation_command": "dbt docs generate", "populate_cache": true, "project_dir": "D:\\REPOS\\DBT_BBVA", "require_explicit_package_overrides_for_builtin_materializations": true, "partial_parse": true, "log_file_max_bytes": 10485760, "log_path": "D:\\REPOS\\DBT_BBVA\\logs", "compile": true, "log_level_file": "debug", "write_json": true, "strict_mode": false, "version_check": true, "partial_parse_file_diff": true, "source_freshness_run_project_hooks": false, "printer_width": 80, "static_parser": true, "enable_legacy_logger": false, "use_colors": true, "use_colors_file": true, "macro_debugging": false, "send_anonymous_usage_stats": true, "defer": false, "quiet": false, "print": true, "warn_error_options": {"include": [], "exclude": []}, "log_level": "info", "cache_selected_only": false, "introspect": true, "show_resource_report": false, "require_resource_names_without_spaces": false, "log_format": "default", "empty_catalog": false, "favor_state": false, "indirect_selection": "eager", "exclude": [], "profiles_dir": "D:\\REPOS\\DBT_BBVA", "select": []}}