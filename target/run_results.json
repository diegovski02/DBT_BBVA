{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.9", "generated_at": "2025-05-16T12:51:35.592665Z", "invocation_id": "3e96585c-ee21-48c8-aeba-3d27167ee28d", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.170961Z", "completed_at": "2025-05-16T12:51:35.177961Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.177961Z", "completed_at": "2025-05-16T12:51:35.177961Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009034395217895508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.bbva_analysis.stg_balances", "compiled": true, "compiled_code": "\n\nselect\n    cast(ID as varchar(64)) as ID,\n    cast(period as varchar(32)) as period,\n    cast(product as varchar(32)) as product,\n    cast(entity as varchar(32)) as entity,\n    month,\n    type,\n    balance_amount,\n    days_default\nfrom \"TR_BI_BBVA\".\"dbo\".\"Balances\"\nwhere ID is not null;", "relation_name": "\"STG_BBVA\".\"stg\".\"stg_balances\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.179960Z", "completed_at": "2025-05-16T12:51:35.183961Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.183961Z", "completed_at": "2025-05-16T12:51:35.183961Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004001140594482422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.bbva_analysis.stg_customers", "compiled": true, "compiled_code": "\n\nselect\n    cast(ID as varchar(64)) as CustomerKey,\n    age,\n    income,\n    time_from_specialized,\n    type_job,\n    bureau_risk,\n    payroll,\n    product_1,\n    product_2,\n    product_3,\n    product_4,\n    ofert_1,\n    ofert_2,\n    ofert_3\nfrom \"TR_BI_BBVA\".\"dbo\".\"Customers\"\nwhere ID is not null;", "relation_name": "\"STG_BBVA\".\"stg\".\"stg_customers\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.187099Z", "completed_at": "2025-05-16T12:51:35.190714Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.190714Z", "completed_at": "2025-05-16T12:51:35.190714Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0047528743743896484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.bbva_analysis.stg_digital_activity", "compiled": true, "compiled_code": "\n\nselect\n    cast(ID as varchar(64)) as ID,\n    cast(period as varchar(32)) as period,\n    month,\n    dig_1,\n    dig_2,\n    dig_3,\n    dig_4,\n    dig_5,\n    dig_6,\n    dig_7,\n    dig_8,\n    dig_9,\n    dig_10,\n    dig_11\nfrom \"TR_BI_BBVA\".\"dbo\".\"Digital_Activity\"\nwhere ID is not null;", "relation_name": "\"STG_BBVA\".\"stg\".\"stg_digital_activity\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.194576Z", "completed_at": "2025-05-16T12:51:35.199439Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.199982Z", "completed_at": "2025-05-16T12:51:35.199982Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006900787353515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.bbva_analysis.stg_liabilities", "compiled": true, "compiled_code": "\n\nselect\n    cast(ID as varchar(64)) as PeriodKey,\n    cast(period as varchar(32)) as period_code,\n    month,\n    product_1,\n    product_2\nfrom \"TR_BI_BBVA\".\"dbo\".\"Liabilities\"\nwhere ID is not null;", "relation_name": "\"STG_BBVA\".\"stg\".\"stg_liabilities\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.202656Z", "completed_at": "2025-05-16T12:51:35.205757Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.206276Z", "completed_at": "2025-05-16T12:51:35.206276Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0052471160888671875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.bbva_analysis.stg_movements", "compiled": true, "compiled_code": "\n\nselect\n    cast(ID as varchar(64)) as ID,\n    cast(period as varchar(32)) as period,\n    month,\n    type_1,\n    type_2,\n    type_3,\n    type_4\nfrom \"TR_BI_BBVA\".\"dbo\".\"Movements\"\nwhere ID is not null;", "relation_name": "\"STG_BBVA\".\"stg\".\"stg_movements\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.208396Z", "completed_at": "2025-05-16T12:51:35.211510Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.212509Z", "completed_at": "2025-05-16T12:51:35.212509Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004634380340576172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.bbva_analysis.stg_sample_submission", "compiled": true, "compiled_code": "\n\nselect\n    cast(ID as varchar(64)) as ID,\n    cast(period as varchar(32)) as period,\n    target\nfrom \"TR_BI_BBVA\".\"dbo\".\"Sample_Submission\"\nwhere ID is not null;", "relation_name": "\"STG_BBVA\".\"stg\".\"stg_sample_submission\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.214513Z", "completed_at": "2025-05-16T12:51:35.218595Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.219115Z", "completed_at": "2025-05-16T12:51:35.219115Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005601644515991211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.stg_dbt__artifacts", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"TR_BI_BBVA\".\"dbt_artifacts\".\"artifacts\"\n\n),\n\nfields as (\n\n    select\n        data:metadata:invocation_id::string as command_invocation_id,\n        data:metadata:env:DBT_CLOUD_RUN_ID::int as dbt_cloud_run_id,\n        generated_at,\n        path,\n        artifact_type,\n        data\n    from base\n\n),\n\ndeduped as (\n\n    select\n        *,\n        row_number() over (\n            partition by command_invocation_id, artifact_type\n            order by generated_at desc\n        ) as index\n    from fields\n    qualify index = 1\n\n),\n\nartifacts as (\n\n    select\n        command_invocation_id,\n        dbt_cloud_run_id,\n        generated_at,\n        path,\n        artifact_type,\n        data\n    from deduped\n\n)\n\nselect * from artifacts", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__artifacts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.221211Z", "completed_at": "2025-05-16T12:51:35.224846Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.224846Z", "completed_at": "2025-05-16T12:51:35.224846Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005195140838623047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.bbva_analysis.dim_customer", "compiled": true, "compiled_code": "\n\nselect\n    c.CustomerKey as CustomerKey,\n    c.age as age,\n    c.income as income,\n    c.time_from_specialized as time_from_specialized,\n    c.type_job as type_job,\n    c.bureau_risk as bureau_risk,\n    c.payroll as payroll,\n    c.product_1 as product_1,\n    c.product_2 as product_2,\n    c.product_3 as product_3,\n    c.product_4 as product_4,\n    c.ofert_1 as ofert_1,\n    c.ofert_2 as ofert_2,\n    c.ofert_3 as ofert_3\nfrom \"STG_BBVA\".\"stg\".\"stg_customers\" as c", "relation_name": "\"MASTER_BBVA\".\"DW\".\"dim_customer\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.226910Z", "completed_at": "2025-05-16T12:51:35.230273Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.230273Z", "completed_at": "2025-05-16T12:51:35.230273Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003883838653564453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.bbva_analysis.dim_tiempo", "compiled": true, "compiled_code": "\n\nselect\n    p.PeriodKey as PeriodKey,\n    p.period_code as period_code,\n    p.month as month\nfrom \"STG_BBVA\".\"stg\".\"stg_liabilities\" as p", "relation_name": "\"MASTER_BBVA\".\"DW\".\"dim_tiempo\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.232272Z", "completed_at": "2025-05-16T12:51:35.245276Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.246276Z", "completed_at": "2025-05-16T12:51:35.246276Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014003276824951172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.stg_dbt__exposures", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__artifacts\"\n\n),\n\nmanifests as (\n\n    select *\n    from base\n    where artifact_type = 'manifest.json'\n\n),\n\nflatten as (\n\n    select\n        command_invocation_id,\n        dbt_cloud_run_id,\n        generated_at as artifact_generated_at,\n        node.key as node_id,\n        node.value:name::string as name,\n        to_array(node.value:depends_on:nodes) as depends_on_nodes,\n        to_array(node.value:sources:nodes) as depends_on_sources,\n        node.value:type::string as type,\n        node.value:owner:name::string as owner,\n        node.value:maturity::string as maturity,\n        node.value:package_name::string as package_name\n    from manifests,\n    lateral flatten(input => data:exposures) as node\n\n),\n\nsurrogate_key as (\n\n    select\n        md5(cast(coalesce(cast(command_invocation_id as \n    string\n), '') || '-' || coalesce(cast(node_id as \n    string\n), '') as \n    string\n)) as manifest_model_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        node_id,\n        name,\n        depends_on_nodes,\n        depends_on_sources,\n        type,\n        owner,\n        maturity,\n        package_name\n    from flatten\n\n)\n\nselect * from surrogate_key", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__exposures\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.249273Z", "completed_at": "2025-05-16T12:51:35.254273Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.255276Z", "completed_at": "2025-05-16T12:51:35.255276Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007999181747436523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.stg_dbt__model_executions", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__artifacts\"\n\n),\n\nrun_results as (\n\n    select *\n    from base\n    where artifact_type = 'run_results.json'\n\n),\n\ndbt_run as (\n\n    select *\n    from run_results\n    where data:args:which = 'run'\n\n),\n\nfields as (\n\n    select\n        command_invocation_id,\n        dbt_cloud_run_id,\n        generated_at as artifact_generated_at,\n        coalesce(data:args:full_refresh, 'false')::boolean as was_full_refresh,\n        result.value:unique_id::string as node_id,\n        split(result.value:thread_id::string, '-')[1]::integer as thread_id,\n        result.value:status::string as status,\n\n        -- The first item in the timing array is the model-level `compile`\n        result.value:timing[0]:started_at::timestamp_ntz as compile_started_at,\n\n        -- The second item in the timing array is `execute`.\n        result.value:timing[1]:completed_at::timestamp_ntz as query_completed_at,\n\n        -- Confusingly, this does not match the delta of the above two timestamps.\n        -- should we calculate it instead?\n        coalesce(result.value:execution_time::float, 0) as total_node_runtime,\n\n        result.value:adapter_response:rows_affected::int as rows_affected\n    from dbt_run,\n    lateral flatten(input => data:results) as result\n\n),\n\nsurrogate_key as (\n\n    select\n        md5(cast(coalesce(cast(command_invocation_id as \n    string\n), '') || '-' || coalesce(cast(node_id as \n    string\n), '') as \n    string\n)) as model_execution_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        was_full_refresh,\n        node_id,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected\n    from fields\n\n)\n\nselect * from surrogate_key", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__model_executions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.257384Z", "completed_at": "2025-05-16T12:51:35.261392Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.261392Z", "completed_at": "2025-05-16T12:51:35.261392Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0050160884857177734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.stg_dbt__models", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__artifacts\"\n\n),\n\nmanifests as (\n\n    select *\n    from base\n    where artifact_type = 'manifest.json'\n\n),\n\nflatten as (\n\n    select\n        command_invocation_id,\n        dbt_cloud_run_id,\n        generated_at as artifact_generated_at,\n        node.key as node_id,\n        node.value:database::string as model_database,\n        node.value:schema::string as model_schema,\n        node.value:name::string as name,\n        to_array(node.value:depends_on:nodes) as depends_on_nodes,\n        node.value:package_name::string as package_name,\n        node.value:path::string as model_path,\n        node.value:checksum.checksum::string as checksum,\n        node.value:config.materialized::string as model_materialization\n    from manifests,\n    lateral flatten(input => data:nodes) as node\n    where node.value:resource_type = 'model'\n\n),\n\nsurrogate_key as (\n\n    select\n        md5(cast(coalesce(cast(command_invocation_id as \n    string\n), '') || '-' || coalesce(cast(node_id as \n    string\n), '') as \n    string\n)) as manifest_model_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        node_id,\n        model_database,\n        model_schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        model_path,\n        checksum,\n        model_materialization\n    from flatten\n\n)\n\nselect * from surrogate_key", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__models\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.263588Z", "completed_at": "2025-05-16T12:51:35.266752Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.267753Z", "completed_at": "2025-05-16T12:51:35.267753Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005167245864868164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.stg_dbt__run_results", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__artifacts\"\n\n),\n\nrun_results as (\n\n    select *\n    from base\n    where artifact_type = 'run_results.json'\n\n),\n\ndbt_run as (\n\n    select *\n    from run_results\n    where data:args:which = 'run'\n\n),\n\nfields as (\n\n    select\n        generated_at as artifact_generated_at,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        data:metadata:dbt_version::string as dbt_version,\n        data:metadata:env as env,\n        data:elapsed_time::float as elapsed_time,\n        data:args:which::string as execution_command,\n        coalesce(data:args:full_refresh, 'false')::boolean as was_full_refresh,\n        data:args:models as selected_models,\n        data:args:target::string as target\n    from dbt_run\n\n)\n\nselect * from fields", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__run_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.269752Z", "completed_at": "2025-05-16T12:51:35.273266Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.273266Z", "completed_at": "2025-05-16T12:51:35.273266Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004514455795288086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.stg_dbt__run_results_env_keys", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__artifacts\"\n\n),\n\nrun_results as (\n\n    select *\n    from base\n    where artifact_type = 'run_results.json'\n\n),\n\ndbt_run as (\n\n    select *\n    from run_results\n    where data:args:which = 'run'\n\n),\n\nenv_keys as (\n\n    select\n        distinct(env.key)\n    from dbt_run,\n    lateral flatten(input => data:metadata:env) as env\n    -- Sort results to ensure things are deterministic\n    order by 1\n\n)\n\nselect * from env_keys", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__run_results_env_keys\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.275780Z", "completed_at": "2025-05-16T12:51:35.280338Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.280338Z", "completed_at": "2025-05-16T12:51:35.280338Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005567312240600586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.stg_dbt__sources", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__artifacts\"\n\n),\n\nmanifests as (\n\n    select *\n    from base\n    where artifact_type = 'manifest.json'\n\n),\n\nflatten as (\n\n    select\n        command_invocation_id,\n        dbt_cloud_run_id,\n        generated_at as artifact_generated_at,\n        node.key as node_id,\n        node.value:name::string as name,\n        node.value:source_name::string as source_name,\n        node.value:schema::string as source_schema,\n        node.value:package_name::string as package_name,\n        node.value:relation_name::string as relation_name,\n        node.value:path::string as source_path\n    from manifests,\n    lateral flatten(input => data:sources) as node\n    where node.value:resource_type = 'source'\n\n),\n\nsurrogate_key as (\n\n    select\n        md5(cast(coalesce(cast(command_invocation_id as \n    string\n), '') || '-' || coalesce(cast(node_id as \n    string\n), '') as \n    string\n)) as manifest_source_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        node_id,\n        name,\n        source_name,\n        source_schema,\n        package_name,\n        relation_name,\n        source_path\n    from flatten\n\n)\n\nselect * from surrogate_key", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__sources\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.282335Z", "completed_at": "2025-05-16T12:51:35.287198Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.287198Z", "completed_at": "2025-05-16T12:51:35.287198Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005860090255737305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.stg_dbt__test_executions", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__artifacts\"\n\n),\n\nrun_results as (\n\n    select *\n    from base\n    where artifact_type = 'run_results.json'\n\n),\n\ndbt_run as (\n\n    select *\n    from run_results\n    where data:args:which = 'test'\n\n),\n\nfields as (\n\n    select\n        command_invocation_id,\n        dbt_cloud_run_id,\n        generated_at as artifact_generated_at,\n        coalesce(data:args:full_refresh, 'false')::boolean as was_full_refresh,\n        result.value:unique_id::string as node_id,\n        split(result.value:thread_id::string, '-')[1]::integer as thread_id,\n        result.value:status::string as status,\n        result.value:message::string as message,\n\n        -- The first item in the timing array is the model-level `compile`\n        result.value:timing[0]:started_at::timestamp_ntz as compile_started_at,\n\n        -- The second item in the timing array is `execute`.\n        result.value:timing[1]:completed_at::timestamp_ntz as query_completed_at,\n\n        -- Confusingly, this does not match the delta of the above two timestamps.\n        -- should we calculate it instead?\n        coalesce(result.value:execution_time::float, 0) as total_node_runtime,\n\n        result.value:adapter_response:rows_affected::int as rows_affected\n    from dbt_run,\n    lateral flatten(input => data:results) as result\n\n),\n\nsurrogate_key as (\n\n    select\n        md5(cast(coalesce(cast(command_invocation_id as \n    string\n), '') || '-' || coalesce(cast(node_id as \n    string\n), '') as \n    string\n)) as model_execution_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        was_full_refresh,\n        node_id,\n        thread_id,\n        status,\n        message,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected\n    from fields\n\n)\n\nselect * from surrogate_key", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__test_executions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.290197Z", "completed_at": "2025-05-16T12:51:35.299484Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.300486Z", "completed_at": "2025-05-16T12:51:35.300486Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011291980743408203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.bbva_analysis.not_null_dim_customer_ID.206d444459", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ID\nfrom \"MASTER_BBVA\".\"DW\".\"dim_customer\"\nwhere ID is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.301487Z", "completed_at": "2025-05-16T12:51:35.305849Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.306850Z", "completed_at": "2025-05-16T12:51:35.306850Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005362272262573242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.bbva_analysis.not_null_dim_customer_customer_key.c289fe4d1f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_key\nfrom \"MASTER_BBVA\".\"DW\".\"dim_customer\"\nwhere customer_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.308848Z", "completed_at": "2025-05-16T12:51:35.315162Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.315162Z", "completed_at": "2025-05-16T12:51:35.315162Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007315874099731445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.bbva_analysis.not_null_dim_customer_ofert_1.b54f425b4c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ofert_1\nfrom \"MASTER_BBVA\".\"DW\".\"dim_customer\"\nwhere ofert_1 is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.317153Z", "completed_at": "2025-05-16T12:51:35.321154Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.322158Z", "completed_at": "2025-05-16T12:51:35.322158Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006001949310302734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.bbva_analysis.not_null_dim_customer_ofert_2.6247fcd68a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ofert_2\nfrom \"MASTER_BBVA\".\"DW\".\"dim_customer\"\nwhere ofert_2 is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.324155Z", "completed_at": "2025-05-16T12:51:35.328686Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.329685Z", "completed_at": "2025-05-16T12:51:35.329685Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006532192230224609, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.bbva_analysis.not_null_dim_customer_ofert_3.b77e93fcba", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ofert_3\nfrom \"MASTER_BBVA\".\"DW\".\"dim_customer\"\nwhere ofert_3 is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.331769Z", "completed_at": "2025-05-16T12:51:35.336049Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.336049Z", "completed_at": "2025-05-16T12:51:35.336049Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005356311798095703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.bbva_analysis.not_null_dim_customer_product_1.45c72757ff", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_1\nfrom \"MASTER_BBVA\".\"DW\".\"dim_customer\"\nwhere product_1 is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.338049Z", "completed_at": "2025-05-16T12:51:35.342754Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.342754Z", "completed_at": "2025-05-16T12:51:35.342754Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005706071853637695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.bbva_analysis.not_null_dim_customer_product_2.7232232a54", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_2\nfrom \"MASTER_BBVA\".\"DW\".\"dim_customer\"\nwhere product_2 is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.344777Z", "completed_at": "2025-05-16T12:51:35.348920Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.348920Z", "completed_at": "2025-05-16T12:51:35.348920Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005148172378540039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.bbva_analysis.not_null_dim_customer_product_3.5bdbc02f70", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_3\nfrom \"MASTER_BBVA\".\"DW\".\"dim_customer\"\nwhere product_3 is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.350914Z", "completed_at": "2025-05-16T12:51:35.354922Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.354922Z", "completed_at": "2025-05-16T12:51:35.354922Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0050084590911865234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.bbva_analysis.not_null_dim_customer_product_4.e0c71ff8ff", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_4\nfrom \"MASTER_BBVA\".\"DW\".\"dim_customer\"\nwhere product_4 is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.357922Z", "completed_at": "2025-05-16T12:51:35.362917Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.363917Z", "completed_at": "2025-05-16T12:51:35.363917Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008003473281860352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.bbva_analysis.unique_dim_customer_customer_key.7b0683cc6e", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_key as unique_field,\n    count(*) as n_records\n\nfrom \"MASTER_BBVA\".\"DW\".\"dim_customer\"\nwhere customer_key is not null\ngroup by customer_key\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.365917Z", "completed_at": "2025-05-16T12:51:35.371917Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.371917Z", "completed_at": "2025-05-16T12:51:35.371917Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0069997310638427734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.bbva_analysis.fact_customer_period", "compiled": true, "compiled_code": "\n\nselect\n    c.CustomerKey,\n    p.PeriodKey,\n    d.dig_1, \n    d.dig_2, \n    d.dig_3, \n    d.dig_4, \n    d.dig_5, \n    d.dig_6, \n    d.dig_7, \n    d.dig_8, \n    d.dig_9, \n    d.dig_10, \n    d.dig_11,\n    b.balance_amount, \n    b.days_default,\n    l.product_1 as debt_product_1, \n    l.product_2 as debt_product_2,\n    m.type_1 as movements_type_1,\n    m.type_2 as movements_type_2,\n    m.type_3 as movements_type_3,\n    m.type_4 as movements_type_4,\n    ss.target\nfrom \"STG_BBVA\".\"stg\".\"stg_digital_activity\" as d\njoin \"MASTER_BBVA\".\"DW\".\"dim_customer\" as c on d.ID = c.CustomerKey\njoin \"MASTER_BBVA\".\"DW\".\"dim_tiempo\" as p on d.period = p.period_code\nleft join \"STG_BBVA\".\"stg\".\"stg_liabilities\" as l on d.ID = l.PeriodKey\nleft join \"STG_BBVA\".\"stg\".\"stg_movements\" as m on d.ID = m.ID\nleft join \"STG_BBVA\".\"stg\".\"stg_sample_submission\" as ss on d.ID = ss.ID\nleft join \"STG_BBVA\".\"stg\".\"stg_balances\" as b on d.ID = b.ID", "relation_name": "\"MASTER_BBVA\".\"DW\".\"fact_customer_period\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.373913Z", "completed_at": "2025-05-16T12:51:35.377914Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.378920Z", "completed_at": "2025-05-16T12:51:35.378920Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006001710891723633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.bbva_analysis.not_null_dim_tiempo_PeriodKey.aafa528efd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect PeriodKey\nfrom \"MASTER_BBVA\".\"DW\".\"dim_tiempo\"\nwhere PeriodKey is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.379913Z", "completed_at": "2025-05-16T12:51:35.385065Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.385065Z", "completed_at": "2025-05-16T12:51:35.385065Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006143331527709961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.bbva_analysis.not_null_dim_tiempo_month.ce48b83224", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect month\nfrom \"MASTER_BBVA\".\"DW\".\"dim_tiempo\"\nwhere month is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.388544Z", "completed_at": "2025-05-16T12:51:35.392029Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.393029Z", "completed_at": "2025-05-16T12:51:35.393029Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005972385406494141, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.bbva_analysis.not_null_dim_tiempo_period_code.6c5d2296f5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect period_code\nfrom \"MASTER_BBVA\".\"DW\".\"dim_tiempo\"\nwhere period_code is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.394031Z", "completed_at": "2025-05-16T12:51:35.398066Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.399269Z", "completed_at": "2025-05-16T12:51:35.399269Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005238056182861328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.bbva_analysis.unique_dim_tiempo_PeriodKey.0dbc69a93a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    PeriodKey as unique_field,\n    count(*) as n_records\n\nfrom \"MASTER_BBVA\".\"DW\".\"dim_tiempo\"\nwhere PeriodKey is not null\ngroup by PeriodKey\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.401279Z", "completed_at": "2025-05-16T12:51:35.407272Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.408273Z", "completed_at": "2025-05-16T12:51:35.408273Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008001089096069336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.dim_dbt__exposures", "compiled": true, "compiled_code": "\n\nwith dbt_models as (\n\n    select * from \"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__exposures\"\n\n),\n\ndbt_models_incremental as (\n\n    select *\n    from dbt_models\n\n    \n\n),\n\nfields as (\n\n     select\n        t.manifest_model_id,\n        t.command_invocation_id,\n        t.dbt_cloud_run_id,\n        t.artifact_generated_at,\n        t.node_id,\n        t.name,\n        t.type,\n        t.owner,\n        t.maturity,\n        f.value::string as output_feeds,\n        t.package_name\n    from dbt_models_incremental as t,\n    lateral flatten(input => depends_on_nodes) as f\n\n)\n\nselect * from fields", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"dim_dbt__exposures\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.410273Z", "completed_at": "2025-05-16T12:51:35.413283Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.414298Z", "completed_at": "2025-05-16T12:51:35.414298Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0050258636474609375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.int_dbt__model_executions", "compiled": true, "compiled_code": "\n\nwith model_executions as (\n\n    select *\n    from \"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__model_executions\"\n\n),\n\nmodel_executions_incremental as (\n\n    select *\n    from model_executions\n\n    \n\n),\n\nfields as (\n\n    select\n        model_execution_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        was_full_refresh,\n        node_id,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected\n    from model_executions_incremental\n\n)\n\nselect * from fields", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"int_dbt__model_executions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.416298Z", "completed_at": "2025-05-16T12:51:35.419298Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.420302Z", "completed_at": "2025-05-16T12:51:35.420302Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0049970149993896484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.dim_dbt__models", "compiled": true, "compiled_code": "\n\nwith dbt_models as (\n\n    select * from \"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__models\"\n\n),\n\ndbt_models_incremental as (\n\n    select *\n    from dbt_models\n\n    \n\n),\n\nfields as (\n\n    select\n        manifest_model_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        node_id,\n        model_database,\n        model_schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        model_path,\n        checksum,\n        model_materialization\n    from dbt_models_incremental\n\n)\n\nselect * from fields", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"dim_dbt__models\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.422751Z", "completed_at": "2025-05-16T12:51:35.439435Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.440455Z", "completed_at": "2025-05-16T12:51:35.440455Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018702268600463867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.fct_dbt__run_results", "compiled": true, "compiled_code": "\n\n\n\nwith run_results as (\n\n    select *\n    from \"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__run_results\"\n\n),\n\nincremental_run_results as (\n\n    select *\n    from run_results\n\n    \n\n),\n\nfields as (\n\n    select\n        artifact_generated_at,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        dbt_version,\n        elapsed_time,\n        execution_command,\n        selected_models,\n        target,\n        was_full_refresh\n\n        \n    from incremental_run_results\n\n)\n\nselect * from fields", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__run_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.443456Z", "completed_at": "2025-05-16T12:51:35.446454Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.446454Z", "completed_at": "2025-05-16T12:51:35.446454Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0061779022216796875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.dim_dbt__sources", "compiled": true, "compiled_code": "\n\nwith dbt_sources as (\n\n    select * from \"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__sources\"\n\n),\n\ndbt_sources_incremental as (\n\n    select *\n    from dbt_sources\n\n    \n\n),\n\nfields as (\n\n    select\n        manifest_source_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        node_id,\n        name,\n        source_name,\n        source_schema,\n        package_name,\n        relation_name,\n        source_path\n    from dbt_sources_incremental\n\n)\n\nselect * from fields", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"dim_dbt__sources\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.448646Z", "completed_at": "2025-05-16T12:51:35.453031Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.453031Z", "completed_at": "2025-05-16T12:51:35.453031Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004384040832519531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.fct_dbt__test_executions", "compiled": true, "compiled_code": "\n\nwith model_executions as (\n\n    select *\n    from \"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__test_executions\"\n\n),\n\nmodel_executions_incremental as (\n\n    select *\n    from model_executions\n\n    \n\n),\n\nfields as (\n\n    select\n        model_execution_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        was_full_refresh,\n        node_id,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected\n    from model_executions_incremental\n\n)\n\nselect * from fields", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__test_executions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.455032Z", "completed_at": "2025-05-16T12:51:35.459029Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.460035Z", "completed_at": "2025-05-16T12:51:35.460035Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005003452301025391, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.bbva_analysis.not_null_fact_customer_period_customer_key.f2f382ae5c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_key\nfrom \"MASTER_BBVA\".\"DW\".\"fact_customer_period\"\nwhere customer_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.462035Z", "completed_at": "2025-05-16T12:51:35.465029Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.466458Z", "completed_at": "2025-05-16T12:51:35.466458Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005424976348876953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.bbva_analysis.not_null_fact_customer_period_period_key.3fa1d9b010", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect period_key\nfrom \"MASTER_BBVA\".\"DW\".\"fact_customer_period\"\nwhere period_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.468460Z", "completed_at": "2025-05-16T12:51:35.471898Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.472912Z", "completed_at": "2025-05-16T12:51:35.472912Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005453348159790039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.bbva_analysis.not_null_fact_customer_period_target.c6beb3d065", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect target\nfrom \"MASTER_BBVA\".\"DW\".\"fact_customer_period\"\nwhere target is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.474907Z", "completed_at": "2025-05-16T12:51:35.479373Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.479373Z", "completed_at": "2025-05-16T12:51:35.479373Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0054645538330078125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_artifacts.not_null_dim_dbt__exposures_manifest_model_id.1cfdaa0c94", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect manifest_model_id\nfrom \"DBT_ARTIFACTS\".\"artifacts\".\"dim_dbt__exposures\"\nwhere manifest_model_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.481374Z", "completed_at": "2025-05-16T12:51:35.485374Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.485374Z", "completed_at": "2025-05-16T12:51:35.485374Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005003452301025391, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_artifacts.unique_dim_dbt__exposures_manifest_model_id_output_feeds.b0bf30fb44", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    manifest_model_id || '-' || output_feeds as unique_field,\n    count(*) as n_records\n\nfrom \"DBT_ARTIFACTS\".\"artifacts\".\"dim_dbt__exposures\"\nwhere manifest_model_id || '-' || output_feeds is not null\ngroup by manifest_model_id || '-' || output_feeds\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.487371Z", "completed_at": "2025-05-16T12:51:35.492374Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.493829Z", "completed_at": "2025-05-16T12:51:35.493829Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007456064224243164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.fct_dbt__model_executions", "compiled": true, "compiled_code": "\n\nwith models as (\n\n    select *\n    from \"DBT_ARTIFACTS\".\"artifacts\".\"dim_dbt__models\"\n\n),\n\nmodel_executions as (\n\n    select *\n    from \"DBT_ARTIFACTS\".\"artifacts\".\"int_dbt__model_executions\"\n\n),\n\nmodel_executions_incremental as (\n\n    select *\n    from model_executions\n\n    \n\n),\n\nmodel_executions_with_materialization as (\n\n    select\n        model_executions_incremental.*,\n        models.model_materialization,\n        models.model_schema,\n        models.name\n    from model_executions_incremental\n    left join models on\n        (\n            model_executions_incremental.command_invocation_id = models.command_invocation_id\n            or model_executions_incremental.dbt_cloud_run_id = models.dbt_cloud_run_id\n        )\n        and model_executions_incremental.node_id = models.node_id\n\n),\n\nfields as (\n\n    select\n        model_execution_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        was_full_refresh,\n        node_id,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        model_materialization,\n        model_schema,\n        name\n    from model_executions_with_materialization\n\n)\n\nselect * from fields", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__model_executions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.494989Z", "completed_at": "2025-05-16T12:51:35.499131Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.500126Z", "completed_at": "2025-05-16T12:51:35.500126Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005136251449584961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_artifacts.not_null_dim_dbt__models_manifest_model_id.df81d26c60", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect manifest_model_id\nfrom \"DBT_ARTIFACTS\".\"artifacts\".\"dim_dbt__models\"\nwhere manifest_model_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.502127Z", "completed_at": "2025-05-16T12:51:35.505125Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.506125Z", "completed_at": "2025-05-16T12:51:35.506125Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004997730255126953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_artifacts.unique_dim_dbt__models_manifest_model_id.c105319f3e", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    manifest_model_id as unique_field,\n    count(*) as n_records\n\nfrom \"DBT_ARTIFACTS\".\"artifacts\".\"dim_dbt__models\"\nwhere manifest_model_id is not null\ngroup by manifest_model_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.508169Z", "completed_at": "2025-05-16T12:51:35.511345Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.512372Z", "completed_at": "2025-05-16T12:51:35.512372Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005211830139160156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_artifacts.not_null_fct_dbt__run_results_command_invocation_id.11abc48935", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect command_invocation_id\nfrom \"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__run_results\"\nwhere command_invocation_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.514358Z", "completed_at": "2025-05-16T12:51:35.517359Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.518363Z", "completed_at": "2025-05-16T12:51:35.518363Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005003929138183594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_artifacts.unique_fct_dbt__run_results_command_invocation_id.08941b96a3", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    command_invocation_id as unique_field,\n    count(*) as n_records\n\nfrom \"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__run_results\"\nwhere command_invocation_id is not null\ngroup by command_invocation_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.520358Z", "completed_at": "2025-05-16T12:51:35.523359Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.524363Z", "completed_at": "2025-05-16T12:51:35.524363Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005000114440917969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_artifacts.not_null_dim_dbt__sources_manifest_source_id.34e9829000", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect manifest_source_id\nfrom \"DBT_ARTIFACTS\".\"artifacts\".\"dim_dbt__sources\"\nwhere manifest_source_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.525868Z", "completed_at": "2025-05-16T12:51:35.529876Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.529876Z", "completed_at": "2025-05-16T12:51:35.529876Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00551295280456543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_artifacts.unique_dim_dbt__sources_manifest_source_id.a9a1a372ce", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    manifest_source_id as unique_field,\n    count(*) as n_records\n\nfrom \"DBT_ARTIFACTS\".\"artifacts\".\"dim_dbt__sources\"\nwhere manifest_source_id is not null\ngroup by manifest_source_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.531876Z", "completed_at": "2025-05-16T12:51:35.534994Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.536004Z", "completed_at": "2025-05-16T12:51:35.536004Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005124092102050781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.fct_dbt__exposures_updates", "compiled": true, "compiled_code": "with model_executions as (\n\n    select * from \"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__model_executions\"\n\n),\n\nexposures_record as (\n\n    select * from \"DBT_ARTIFACTS\".\"artifacts\".\"dim_dbt__exposures\"\n\n),\n\n\nmodel_updates as (\n\n    select \n        max(query_completed_at) as latest_update,\n        node_id\n    from model_executions\n    group by node_id\n\n),\n\nexposures_latest as (\n\n    select\n        artifact_generated_at as latest_generation,\n        node_id,\n        name,\n        type,\n        owner,\n        maturity,\n        package_name,\n        output_feeds\n    from exposures_record\n    where artifact_generated_at = (select max(artifact_generated_at) from exposures_record)\n\n),\n\nexposures_updates as (\n\n    select \n        e.latest_generation,\n        e.node_id,\n        e.name, \n        e.type,\n        e.owner,\n        e.maturity,\n        e.package_name,\n        e.output_feeds,\n        latest_update as feed_latest_update\n    from exposures_latest e\n    left join model_updates m\n      on m.node_id = e.output_feeds\n\n)\n\nselect * from exposures_updates", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__exposures_updates\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.538003Z", "completed_at": "2025-05-16T12:51:35.541004Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.541004Z", "completed_at": "2025-05-16T12:51:35.541004Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00400233268737793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.fct_dbt__latest_full_model_executions", "compiled": true, "compiled_code": "with run_results as (\n\n    select *\n    from \"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__run_results\"\n\n),\n\nmodel_executions as (\n\n    select *\n    from \"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__model_executions\"\n\n),\n\nlatest_full as (\n\n    select *\n    from run_results\n    where selected_models is null and was_full_refresh = false\n    order by artifact_generated_at desc\n    limit 1\n\n),\n\njoined as (\n\n    select\n        model_executions.*\n    from latest_full\n    left join model_executions on\n        model_executions.command_invocation_id = latest_full.command_invocation_id\n        or model_executions.dbt_cloud_run_id = latest_full.dbt_cloud_run_id\n\n),\n\nfields as (\n\n    select\n        artifact_generated_at,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        model_execution_id,\n        model_materialization,\n        model_schema,\n        name,\n        node_id,\n        thread_id,\n        rows_affected,\n        status,\n        was_full_refresh\n    from joined\n\n)\n\nselect * from fields", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__latest_full_model_executions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.545563Z", "completed_at": "2025-05-16T12:51:35.548991Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.550009Z", "completed_at": "2025-05-16T12:51:35.550009Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005446910858154297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_artifacts.not_null_fct_dbt__model_executions_model_execution_id.ecb7ddbb69", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect model_execution_id\nfrom \"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__model_executions\"\nwhere model_execution_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.552015Z", "completed_at": "2025-05-16T12:51:35.556008Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.556008Z", "completed_at": "2025-05-16T12:51:35.556008Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005003929138183594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_artifacts.unique_fct_dbt__model_executions_model_execution_id.ab9f314f59", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    model_execution_id as unique_field,\n    count(*) as n_records\n\nfrom \"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__model_executions\"\nwhere model_execution_id is not null\ngroup by model_execution_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.559012Z", "completed_at": "2025-05-16T12:51:35.563017Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.564513Z", "completed_at": "2025-05-16T12:51:35.564513Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0075037479400634766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.fct_dbt__critical_path", "compiled": true, "compiled_code": "with models as (\n\n    select *\n    from \"DBT_ARTIFACTS\".\"artifacts\".\"stg_dbt__models\"\n\n),\n\nlatest_executions as (\n\n    select *\n    from \"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__latest_full_model_executions\"\n\n),\n\nlatest_id as (\n    -- Find the latest full, incremental execution\n\n    select\n        any_value(command_invocation_id) as command_invocation_id,\n        any_value(dbt_cloud_run_id) as dbt_cloud_run_id\n    from latest_executions\n\n),\n\nlatest_models as (\n    -- Get the latest set of models for the above execution\n\n    select\n        models.node_id,\n        models.depends_on_nodes,\n        models.model_materialization\n    from latest_id\n    left join models on\n        latest_id.command_invocation_id = models.command_invocation_id\n        or latest_id.dbt_cloud_run_id = models.dbt_cloud_run_id\n\n\n),\n\nnode_dependencies as (\n    -- Create a row for each model and dependency (could be another model, or source)\n\n    select\n        latest_models.node_id,\n        node.value::string as depends_on_node_id,\n        regexp_substr(node.value::string, '^([a-z]+)') as depends_on_node_type\n    from latest_models,\n    lateral flatten(input => latest_models.depends_on_nodes) as node\n\n),\n\nnode_dependencies_deduped as (\n    -- depends_on_nodes is simply a list of all the ref() statements used in a model, so it may contain duplicates\n\n    select distinct\n        node_id,\n        depends_on_node_type,\n        depends_on_node_id\n    from node_dependencies\n\n),\n\nmodel_dependencies_with_total_node_runtime as (\n    -- Model dependencies enriched with execution time\n\n    select distinct\n        node_dependencies_deduped.node_id,\n        latest_executions.total_node_runtime,\n        depends_on_node_id\n    from node_dependencies_deduped\n    left join latest_executions on node_dependencies_deduped.node_id = latest_executions.node_id\n    where depends_on_node_type = 'model'\n\n),\n\nmodels_with_at_least_one_model_dependency as (\n    -- Return a list of model nodes which have at least one model dependency\n\n    select distinct\n        node_id\n    from node_dependencies\n    where depends_on_node_type = 'model'\n\n),\n\nmodels_with_no_model_dependencies_with_total_node_runtime as (\n    -- Models which have no dependencies enriched with execution time\n    -- These are models at the base of the tree\n\n    select\n        latest_models.node_id,\n        latest_executions.total_node_runtime\n    from latest_models\n    left join models_with_at_least_one_model_dependency\n        on latest_models.node_id = models_with_at_least_one_model_dependency.node_id\n    left join latest_executions on latest_models.node_id = latest_executions.node_id\n    where models_with_at_least_one_model_dependency.node_id is null\n\n),\n\nmodels_with_dependent_models as (\n    -- Get a list of all the models which have dependent models\n\n    select distinct depends_on_node_id as node_id\n    from node_dependencies_deduped\n\n),\n\nmodels_with_no_dependent_models as (\n    -- Models which have no dependents\n    -- These are models at the tips of the tree\n\n    select\n        latest_models.node_id\n    from latest_models\n    left join models_with_dependent_models\n    on latest_models.node_id = models_with_dependent_models.node_id\n    where models_with_dependent_models.node_id is null\n\n),\n\nanchor as (\n    -- The anchor of a recursive CTE is the initial query\n    -- The anchor in this case is models which have no dependents, the tips of the tree\n    -- The dependencies for these models are joined in to build out the paths during recursion\n\n    select\n        models_with_no_dependent_models.node_id,\n        coalesce(node_dependencies_deduped.depends_on_node_id, '') as depends_on_node_id,\n        coalesce(latest_executions.total_node_runtime, 0) as total_node_runtime\n    from models_with_no_dependent_models\n    left join node_dependencies_deduped on models_with_no_dependent_models.node_id = node_dependencies_deduped.node_id\n    left join latest_executions on models_with_no_dependent_models.node_id = latest_executions.node_id\n\n),\n\nall_needed_dependencies as (\n    -- Union all the base models with all other dependencies\n    -- Use an empty string for depends_on_node_id to avoid NULL result in a non-nullable column error\n    -- Nothing will join onto the empty string depends_on_node_id, ending the recursion at the base.\n\n    select\n        node_id,\n        total_node_runtime,\n        '' as depends_on_node_id\n    from models_with_no_model_dependencies_with_total_node_runtime\n    union\n    select\n        node_id,\n        total_node_runtime,\n        depends_on_node_id as depends_on_node_id\n    from model_dependencies_with_total_node_runtime\n\n),\n\nsearch_path (node_ids, total_time) as (\n    -- The recursive part\n    -- This CTE creates an array of node_ids and total_time for every possible path through the DAG\n    -- Starting with the tips of the tree, work backwards through every path until there's a '' depends_on_node_id\n\n    select\n        array_construct(depends_on_node_id, node_id),\n        total_node_runtime\n    from anchor\n    union all\n    select\n        array_cat(to_array(all_needed_dependencies.depends_on_node_id), search_path.node_ids) as node_ids,\n        coalesce(all_needed_dependencies.total_node_runtime, 0) + search_path.total_time\n    from search_path\n    left join all_needed_dependencies\n    where get(search_path.node_ids, 0) = all_needed_dependencies.node_id\n\n),\n\nlongest_path_node_ids as (\n    -- Find the path with the longest total time\n\n    select\n        -- Remove any empty strings from the beginning of the array that were introduced in search_path to prevent infinite recursion\n        case\n            when get(node_ids, 0) = ''\n            -- Ensure we keep the last element of the array by using array_size for the last index\n            then array_slice(node_ids, 1, array_size(node_ids))\n            else node_ids\n        end as node_ids,\n        total_time\n    from search_path\n    order by total_time desc\n    limit 1\n\n),\n\nflattened as (\n    -- Flatten the array of node_ids and keep the index\n\n    select\n        value as node_id,\n        index\n    from longest_path_node_ids,\n    lateral flatten (input => node_ids)\n\n),\n\nlongest_path_with_times as (\n    -- Join the indidivual model execution times back in along with the materializations\n\n    select\n        flattened.node_id::string as node_id,\n        flattened.index,\n        latest_executions.total_node_runtime/60 as execution_minutes,\n        latest_models.model_materialization\n    from flattened\n    left join latest_executions on flattened.node_id = latest_executions.node_id\n    left join latest_models on flattened.node_id = latest_models.node_id\n\n)\n\nselect * from longest_path_with_times", "relation_name": "\"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__critical_path\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.566523Z", "completed_at": "2025-05-16T12:51:35.570532Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.571534Z", "completed_at": "2025-05-16T12:51:35.571534Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006011962890625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_artifacts.not_null_fct_dbt__latest_full_model_executions_node_id.75b07a2f66", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect node_id\nfrom \"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__latest_full_model_executions\"\nwhere node_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.573533Z", "completed_at": "2025-05-16T12:51:35.576532Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.577533Z", "completed_at": "2025-05-16T12:51:35.577533Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00500035285949707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_artifacts.unique_fct_dbt__latest_full_model_executions_node_id.b6f2773b6c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    node_id as unique_field,\n    count(*) as n_records\n\nfrom \"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__latest_full_model_executions\"\nwhere node_id is not null\ngroup by node_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.578980Z", "completed_at": "2025-05-16T12:51:35.582459Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.583456Z", "completed_at": "2025-05-16T12:51:35.583456Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005923271179199219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_artifacts.not_null_fct_dbt__critical_path_node_id.8a76d88496", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect node_id\nfrom \"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__critical_path\"\nwhere node_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T12:51:35.584557Z", "completed_at": "2025-05-16T12:51:35.588662Z"}, {"name": "execute", "started_at": "2025-05-16T12:51:35.589663Z", "completed_at": "2025-05-16T12:51:35.589663Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005106687545776367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_artifacts.unique_fct_dbt__critical_path_node_id.a430b9cf10", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    node_id as unique_field,\n    count(*) as n_records\n\nfrom \"DBT_ARTIFACTS\".\"artifacts\".\"fct_dbt__critical_path\"\nwhere node_id is not null\ngroup by node_id\nhaving count(*) > 1\n\n\n", "relation_name": null}], "elapsed_time": 0.8697116374969482, "args": {"macro_debugging": false, "use_colors": true, "quiet": false, "require_explicit_package_overrides_for_builtin_materializations": true, "cache_selected_only": false, "partial_parse": true, "project_dir": "D:\\dbt_bbva\\bbva_analysis", "log_format_file": "debug", "invocation_command": "dbt docs generate", "source_freshness_run_project_hooks": false, "vars": {}, "static_parser": true, "introspect": true, "select": [], "print": true, "populate_cache": true, "send_anonymous_usage_stats": true, "which": "generate", "profiles_dir": "C:\\Users\\compu\\.dbt", "log_path": "D:\\dbt_bbva\\bbva_analysis\\logs", "static": false, "strict_mode": false, "partial_parse_file_diff": true, "log_level": "info", "use_colors_file": true, "enable_legacy_logger": false, "log_level_file": "debug", "log_format": "default", "show_resource_report": false, "require_resource_names_without_spaces": false, "warn_error_options": {"include": [], "exclude": []}, "log_file_max_bytes": 10485760, "indirect_selection": "eager", "printer_width": 80, "write_json": true, "favor_state": false, "version_check": true, "defer": false, "empty_catalog": false, "exclude": [], "compile": true}}